#!/usr/bin/env groovy
//@Library(['piper-lib']) _
@Library(['piper-lib', 'piper-lib-os']) _
// Benny路过，留印~ +1

IntegrationSuccessEmailNotification = 'benny.gu@sap.com; lisa.liu01@sap.com; bill.tang@sap.com; stephen.zhang02@sap.com; echo.wang01@sap.com; sue.jiang@sap.com; jianfeng.wang@sap.com; haifeng.yao@sap.com'

try {
        stage('Central Build') {
            lock(resource: "${env.JOB_NAME}/10", inversePrecedence: true) { //lock shared resource
                milestone label: 'RC project, Central Build stage', ordinal: 10    //force all builds to go through in order
                node {

                    deleteDir()
                    checkout scm

                    setupPipelineEnvironment script: this
                    
                    measureDuration(script: this, measurementName: 'build_duration') {
                        
                        
                        setVersion (script: this, buildTool:'maven',filePath:'srv/pom.xml', timestampTemplate: "%Y%m%d%H%M%S'CST -d'+8 hour")
                        
                        currentBuild.description = globalPipelineEnvironment.getArtifactVersion()
                        // /manually check the xmake nova server, if the job type is SP. the piper script only handles with SP type.
                        stashFiles(script: this) {
                             executeBuild script: this
                        }
                                           
                    }
                }
            }
        }

        stage('Unit Tests') {
            lock(resource: "${env.JOB_NAME}/20", inversePrecedence: true) {
                milestone label: 'RC project, additonal Unit Test in non-cloud envirement', ordinal: 20
                parallel(
                    'OPA5': {

                        node {
                            // checkout scm
                             setupPipelineEnvironment script: this
                            // stashFiles(script: this) {}

                            if (globalPipelineEnvironment.configuration.general.runOpaTests) {
                                deleteDir()                                                               
 
                                measureDuration(script: this, measurementName: 'opa_duration') {
                                    //executeOnePageAcceptanceTests script: this, buildTool: 'maven', failOnError: 'false', dockerCommand: 'buildTool=maven: /opt/selenium/start.sh mvn -B -e clean install -f pom_sal.xml -Pexecute.qunit -Dwebdriver.chrome.driver=/opt/selenium/chromedriver -DappUnitTestSuite=testsuiteUnit.qunit.html'
                                      
                                    archiveArtifacts allowEmptyArchive: true, artifacts: 'target/**', caseSensitive: false, defaultExcludes: false
                                    
                                    publishTestResults  allowUnstableBuilds: true, script: this, junit: [archive: true, allowEmptyResults: true, pattern: '**/target/surefire-reports/*.xml']
                                    
                                   
                                }
                               
                               
                            }
                        }
                    }, 
                    'PerformanceUnit': {
                        node {
                            if (globalPipelineEnvironment.configuration.general.runPerformanceUnitTests) {
                                deleteDir()
                                measureDuration(script: this, measurementName: 'perfunit_duration') {
                                    executePerformanceUnitTests script: this
                                    publishTestResults script: this, contiperf: [archive: true]
                                }
                            }
                        }
                    }, 
                    'Security static scan':{
                        node{
                                // stash includes: '**/pom_sal.xml', name: 'buildDescriptor'
                                // //stashFiles stashIncludes: [buildDescriptor: '**/pom_sal.xml']
                                // unstash 'buildDescriptor'
                                // //archiveArtifacts allowEmptyArchive: true, artifacts: '**/**'
                                  executeFortifyScan script: this, environment: 'docker', fortifyCredentialsId: 'I068170', memory: '-Xmx48G -Xms24G'
                                  executeFortifyAuditStatusCheck script: this, fortifyCredentialsId: 'I068170'
                            }
                        },
                        'opensource': {
                        node{
                                // stash includes: '**/pom_sal.xml', name: 'buildDescriptor'
                                // //stashFiles stashIncludes: [buildDescriptor: '**/pom_sal.xml']
                                // unstash 'buildDescriptor'
                                // //archiveArtifacts allowEmptyArchive: true, artifacts: '**/**'
                                  executeOpenSourceDependencyScan script: this, scanType: 'maven', vulas: true, buildDescriptorFile: './pom_opensource.xml'
                                
                        }
                    },

                    failFast: false
                )
                //temporarily breakpoint set for fast troubleshoot
                //input 'a break point set by Benny for OPA5'
            }
        }

        stage('Integration') {
            lock(resource: "${env.JOB_NAME}/30", inversePrecedence: true) {
                milestone label: 'RC project, Integration stage', ordinal: 30
                node {
                    deleteDir()
                    //downloadArtifactsFromNexus(script: this, artifactType: 'java', buildTool: 'maven', fromStaging: true)
                    
                    //executeOnePageAcceptanceTests script: this, buildTool: 'maven', failOnError: 'false', dockerCommand: 'buildTool=maven: /opt/selenium/start.sh mvn -B -e clean install -f pom_sal.xml -Pexecute.qunit -Dwebdriver.chrome.driver=/opt/selenium/chromedriver -DappUnitTestSuite=testsuiteIntegration.qunit.html'
                    publishTestResults  allowUnstableBuilds: true, script: this, junit: [archive: true, allowEmptyResults: true, pattern: '**/target/surefire-reports/*.xml']
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'target/**', caseSensitive: false, defaultExcludes: false
                    
                    emailext attachmentsPattern: 'target/screenshots/com.sap.ui5*/*.png', body: '$DEFAULT_CONTENT', subject: 'Integration result', to: 'lisa.liu01@sap.com'
                    sh '''#!/bin/bash
                        echo check dir and files after downloadArtifactsFromNexus
                        pwd
                        echo check all files in current dir
                        ls -a
                    '''

                    //bg_deployToCloudFoundry(script: this, useCAM: false, deployTool: 'cf_native', deployType: 'standard', cfSpace: 'CXS', cfManifest: 'manifest_integration.yml')
                    deployToCloudFoundry(script: this, useCAM: false, deployTool: 'cf_native', deployType: 'standard', cfSpace: 'RC2_integration', cfManifest: 'manifest_integration.yml')
                    //, cfAppName: 'rc_cd_demo', deployType: 'blue-green'

                    //custom integration tests
                    // if (globalPipelineEnvironment.configuration.stages.Integration.extensionIntegrationTestScript) {
                    //     executeCustomIntegrationTests script: this
                    // }


                    def thisBuildversion = globalPipelineEnvironment.getArtifactVersion()
                    emailext body: """
this artifact is alrady passed integration test. it is now pending in the pipeline.<br/>
this artifact build version is:  ${thisBuildversion}
<br/>
QE & PO need to review it and decide if continue test it in acceptance stage for manual tests.<br/>
Note, please make sure the last test(s) in acceptance stage is already finished before trigger to deploy this artifact to accept test stage.<br/>
<a href=\'${env.BUILD_URL}input\'>${env.JOB_NAME}</a>
<br/>
---------------UNICODE TEST--------------
<br/>
这个artifact已经通过了intergration test，现在pipeline pending中~~<br/>
当前build的版本号是： ${thisBuildversion}
<br/>
QE & PO决定是不是把它放入acceptance stage继续做手工测试。<br/>
注意，按此URL去trigger此次Acceptance deployment之前需要确定当前acceptance stage中的测试已经完成~！<br/>
<a href=\'${env.BUILD_URL}input\'>${env.JOB_NAME}</a>
<br/>
""", subject: 'New version of ReadinessCheck2.0 ready, integration test success, pending for acceptance test', to: IntegrationSuccessEmailNotification
                }
                // 这个input必须放在node{}外！！
                input 'Should new version be tested in acceptance stage now??'
            }
        }

        stage('Acceptance') {
            lock(resource: "${env.JOB_NAME}/40", inversePrecedence: true) {
                milestone label: 'RC project, Acceptance stage', ordinal: 40
                node {
                    deleteDir()
                    measureDuration(script: this, measurementName: 'deploy_test_duration') {
                        downloadArtifactsFromNexus script: this, fromStaging: true
                        //deployToCloudFoundry script: this
                        deployToCloudFoundry(script: this, useCAM: false, deployTool: 'cf_native', deployType: 'blue-green', cfSpace: 'RC2_acceptance', cfAppName: 'rc_cd_demo_acceptance', cfManifest: 'manifest_acceptance.yml')
                        //executeHealthCheck script: this
                    }
                    if (globalPipelineEnvironment.configuration.general.runFunctionalAcceptanceTests) {
                        measureDuration(script: this, measurementName: 'gauge_duration') {
                            // refer to this URL for Gauge test:
                            // https://wiki.wdf.sap.corp/wiki/display/HCPCollaboration/Acceptance+Testautomation+with+Gauge
                           // executeGaugeTests script: this
                           // publishTestResults script: this, gauge: [archive: true]
                        }
                    }
                    def thisBuildversion = globalPipelineEnvironment.getArtifactVersion()
                    emailext body: """
Build ${thisBuildversion} is tested in acceptance stage.<br/>
Please visit the application via:<br/>
https://rc_cd_demo_acceptance.cfapps.sap.hana.ondemand.com
<br/>

To deploy it to Prod envirement, please approve it via:
<br/>
<a href=\'${env.BUILD_URL}input\'>${env.JOB_NAME}</a>
<br/>
""", subject: 'New version of ReadinessCheck2.0 is ready for Prod deployment', to: IntegrationSuccessEmailNotification
                }
            }
            input 'Should new version be deployed to Prod now??'
        }

        stage('demo Prod') {
            node{
                deleteDir()
                downloadArtifactsFromNexus script: this, fromStaging: true
                deployToCloudFoundry(script: this, useCAM: false, deployTool: 'cf_native', deployType: 'blue-green', cfSpace: 'RC2_acceptance', cfAppName: 'rc_cd_demo', cfManifest: 'manifest.yml')
                def thisBuildversion = globalPipelineEnvironment.getArtifactVersion()
                emailext body: """
Build ${thisBuildversion} is alrady deployed into Prod envirement.<br/>
Deployment smoketest was successful.<br/>
Please visit the application via:<br/>
https://rc_cd_demo.cfapps.sap.hana.ondemand.com
<br/>
""", subject: 'New version of ReadinessCheck2.0 is deployed into Prod envirement', to: IntegrationSuccessEmailNotification
            }
        }

/*
        stage('Security') {
            lock(resource: "${env.JOB_NAME}/50", inversePrecedence: true) {
                milestone 50
                parallel(
                        'Fortify': {
                            node {
                                deleteDir()
                                measureDuration(script: this, measurementName: 'fortify_duration') {
                                    executeFortifyScan script: this
                                }
                            }
                        },
                        'Checkmarx': {
                            node {
                                deleteDir()
                                measureDuration(script: this, measurementName: 'checkmarx_duration') {
                                    executeCheckmarxScan script: this
                                }
                            }
                        },
                        'OpenSourceVulnerability': {
                            node {
                                deleteDir()
                                measureDuration(script: this, measurementName: 'opensourcevulnerability_duration') {
                                    executeOpenSourceDependencyScan script: this
                                }
                            }
                        }, failFast: false
                )
            }
        }
*/
/*
        stage('Performance') {
            lock(resource: "${env.JOB_NAME}/60", inversePrecedence: true) {
                milestone 60
                node {
                    deleteDir()
                    measureDuration(script: this, measurementName: 'deploy_perf_duration') {
                        downloadArtifactsFromNexus script: this, fromStaging: true
                        deployToCloudFoundry script: this
                        executeHealthCheck script: this
                    }
                    if (globalPipelineEnvironment.configuration.general.runPerformanceJMeterTests) {
                        deleteDir()
                        measureDuration(script: this, measurementName: 'jmeter_duration') {
                            executePerformanceJMeterTests script: this
                            publishTestResults script: this, jmeter: [archive: true]
                        }
                    }
                    if (globalPipelineEnvironment.configuration.general.runPerformanceSUT) {

                        deleteDir()
                        measureDuration(script: this, measurementName: 'sut_duration') {
                            executePerformanceSingleUserTests script: this
                            publishTestResults script: this, supa: [archive: true]
                        }
                    }
                }
            }
        }
*/      
/*
        // is this stag4e necessary?
        stage('IPScan and PPMS') {
            lock(resource: "${env.JOB_NAME}/70", inversePrecedence: true) {
                milestone 70
                node {
                    deleteDir()
                    measureDuration(script: this, measurementName: 'whitesource_duration') {
                        executeWhitesourceScan script: this
                    }
                    if (globalPipelineEnvironment.configuration.steps.executePPMSWhitesourceComplianceCheck.ppmsCredentialsId) {
                        deleteDir()
                        measureDuration(script: this, measurementName: 'ppmscheck_duration') {
                            executePPMSComplianceCheck script: this
                        }
                    }
                }
            }
        }

        stage('Promote') {
            //input message: 'Shall we proceed to promotion & release?'
            lock(resource: "${env.JOB_NAME}/80", inversePrecedence: true) {
                milestone 80
                node {
                    deleteDir()
                    measureDuration(script: this, measurementName: 'promote_duration') {
                        executeBuild script: this, buildType: 'xMakePromote'
                    }
                }
            }
        }

        stage('Release') {
            lock(resource: "${env.JOB_NAME}/90", inversePrecedence: true) {
                milestone 90
                node {
                    measureDuration(script: this, measurementName: 'release_duration') {
                        deleteDir()
                        downloadArtifactsFromNexus script: this
                        deployToCloudFoundry script: this
                        executeHealthCheck script: this
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }
*/

} catch (Throwable err) { // catch all exceptions
    globalPipelineEnvironment.addError(this, err)
    throw err
} finally {
    node{
        writeInflux script: this
        // sendNotificationMail script: this
    }
}

